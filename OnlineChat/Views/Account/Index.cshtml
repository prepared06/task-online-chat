@model OnlineChat.Models.DTO.UserAndContactsViewModel;
<h1 class="text-center">hello @Model.NickName</h1>



<div class="row">
    <div id="chats" class="col-md-3">
        <div class="contacts pt-2">
            @foreach(var contacts in @Model.Contacts)
            {
                <button class = "contact btn btn-primary btn-block" value="@contacts">@contacts</button>
            }         
        </div>
        <div class="groups pt-2">
            @if(Model.Groups != null)
            {
                foreach(var group in Model.Groups)
                {
                    <button class= "group btn btn-primary btn-block" value="@group">@group</button>
                }
            }
        </div>
            
        
    </div>
    <div id="chatroom" class="col-md-9">
        
            <h3 id="title" class="text-center">Chating</h3>
        
    </div>
</div>



<script>
    //connection to hub
    const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/chat")
            .build();
    //names of users
    const userName='@Model.NickName';
    let adresseeName="";

    //adding chat
    function addChat(){
        let form= document.createElement("div");
        form.setAttribute("id","inputForm");

        let inputText = document.createElement("input");
        inputText.type = "text";
        inputText.id="message";

        let inputButton = document.createElement("input");
        inputButton.type = "button";
        inputButton.id="sendBtn";
        inputButton.value="Send";

        form.appendChild(inputText);
        form.appendChild(inputButton);

        let chatWindow = document.getElementById("chatroom");
        chatWindow.appendChild(form);        
    }
    //clear chat
    function clearChat(){
        var chatWindow = document.getElementById("chatroom");
        chatWindow.innerHTML = '';
    }
    function deleteMessage(){     
        let checkBoxes = document.querySelectorAll("input.select-message");
        let messagesForDeleteIds=[];
        Array.from(checkBoxes).forEach(p=>{
              if(p.checked==true){
                  messagesForDeleteIds.push(p.parentElement.id);
              }              
       });

       let deleteForMe= confirm("Delete for all or only for me?");//should here use custom dialog box
       if(deleteForMe){
           //delete for all
           Array.from(messagesForDeleteIds).forEach(messageId=>{
               let url ="/Messages?id="+messageId+"&DeletedForMyself=false"
               fetch(url,{
                method: "DELETE",
                headers: { "Accept": "application/json" }
            }).then(response=>{
                if(response.ok){
                    let chatWindow = document.getElementById("chatroom");
                    chatWindow.removeChild(document.getElementById(messageId));
                }
            });            
           });
       }else{
           console.log("delete for me");
           
       }  
    }
    function editMessage(){
        console.log("Edit something");

        let checkBoxes = document.querySelectorAll("input.select-message");

        let messagesForEditIds=[];

        Array.from(checkBoxes).forEach(p=>{
              if(p.checked==true){
                  messagesForEditIds.push(p.parentElement.id);
              }});
        let editMessage = prompt("Type new text");
        if(editMessage!=null){
            Array.from(messagesForEditIds).forEach(messageId=>{
                let url="/Messages?id="+messageId+"&newText="+editMessage;
                fetch(url,{
                    method: "PUT",
                    headers: { "Accept": "application/json" }
                }).then(response=>{
                    if(response.ok){
                        
                        let text = document.getElementById(messageId).innerText;
                        let userName = text.split(':')[0];
                      
                        text =addCheckBox().outerHTML+' <b>'+userName+': '+'</b>'+editMessage;

                        document.getElementById(messageId).innerHTML=text;   
                    }
                });
            });    
        }
    }
    function replyMessage(){
        console.log("Reply something");
    }

    function addPanelChoice(){
        let blockChoice = document.getElementById("block-choices");
        if(blockChoice!=null){
            return;
        }

        let blockWithChoices = document.createElement("div");
        blockWithChoices.setAttribute("id","block-choices");

        let buttonDelete = document.createElement("button");
        buttonDelete.setAttribute("id","deleteButton");
        buttonDelete.setAttribute("class","btn m-2");
        buttonDelete.setAttribute("onclick","deleteMessage()");
        buttonDelete.innerText="Delete";
        

        let buttonEdit = document.createElement("button");
        buttonEdit.setAttribute("id","editButton");
        buttonEdit.setAttribute("class","btn m-2");
        buttonEdit.setAttribute("onclick","editMessage()");
        buttonEdit.innerText="Edit";
        

        let buttonReply = document.createElement("button");
        buttonReply.setAttribute("id","replyButton");
        buttonReply.setAttribute("onclick","replyMessage()");
        buttonReply.setAttribute("class","btn m-2");
        buttonReply.innerHTML="Reply";
        


        blockWithChoices.appendChild(buttonDelete);
        blockWithChoices.appendChild(buttonEdit);
        blockWithChoices.appendChild(buttonReply);


        let firstElem = document.getElementById("chatroom").firstChild;
        document.getElementById("chatroom").insertBefore(blockWithChoices, firstElem);
    }
    function removePanelChoice(){
        let blockChoice = document.getElementById("block-choices");
        document.getElementById("chatroom").removeChild(blockChoice);
    }

    function checkfunction(){
        let checkBoxes = document.querySelectorAll("input.select-message");
        let checked = Array.from(checkBoxes).some(function(p){
                            return p.checked ==true;
                        });
        if(checked==true){
            addPanelChoice();
        }else{        
            removePanelChoice();
        }  
    }

    function addCheckBox(){
        let checkbox= document.createElement("input");     
        checkbox.type="checkbox"       
        checkbox.setAttribute("class","select-message");
        checkbox.setAttribute("onclick","checkfunction()");
        return checkbox;
    }

    
    
    const contacts = document.querySelectorAll("button.contact");
    Array.from(contacts).forEach(contact =>
        contact.addEventListener("click", function(contact){
            adresseeName=this.value;
            
            //clear chat space
            clearChat();
            
            let url="/Messages?nickNameSender="+userName+"&nickNameAdressee="+adresseeName;

            fetch(url, {
                method: "GET",
                headers: { "Accept": "application/json" }
            }).then(response => response.json()).then(data=>{
                for(let i=0;i<data.length;i++){
                    let userNameElem = document.createElement("b");
                    userNameElem.appendChild(document.createTextNode(data[i].sender.nickName + ': '));

                    let elem = document.createElement("p");
                    elem.setAttribute("id",data[i].id);
                    elem.appendChild(addCheckBox());
                    elem.appendChild(userNameElem);
                    elem.appendChild(document.createTextNode(data[i].text));
                    

                    let chatWindow = document.getElementById("chatroom");

                    
                    chatWindow.appendChild(elem);
                    
                }
                
                addChat();

                // sending message to server
                document.getElementById("sendBtn").addEventListener("click", function (e) {
                let message = document.getElementById("message").value;
            
                hubConnection.invoke("Send", userName,adresseeName, message);
                //clear input field after sending message
                let inputField = document.getElementById("message");
                inputField.value="";
                });
            });
                     
        }));

        const groupContacts = document.querySelectorAll("button.group");
        Array.from(groupContacts).forEach(groupContact =>
            groupContact.addEventListener("click", function(groupContact){
                
                adresseeName=this.value;
                
                let url="/MessagesFromGroups/?groupName="+adresseeName;
                clearChat();

                fetch(url, {
                method: "GET",
                headers: { "Accept": "application/json" }
                }).then(response => response.json()).then(data =>{
                    for(let i=0;i<data.length;i++){
                    let userNameElem = document.createElement("b");
                    userNameElem.appendChild(document.createTextNode(data[i].sender.nickName + ': '));

                    let elem = document.createElement("p");
                    elem.appendChild(addCheckBox());
                    elem.setAttribute("id",data[i].id);
                    elem.appendChild(userNameElem);
                    elem.appendChild(document.createTextNode(data[i].text));

                    let chatWindow = document.getElementById("chatroom");

                    chatWindow.appendChild(elem);
                    }

                    addChat();

                    
                    // sending message to server
                    document.getElementById("sendBtn").addEventListener("click", function (e) {
                    let message = document.getElementById("message").value;
            
                    hubConnection.invoke("SendToGroups", userName,adresseeName, message);
            
                    //clear input field after sending message
                    let inputField = document.getElementById("message");
                    inputField.value="";
                    }); 
                });
    
            }));

 
        //recieving message from server
        hubConnection.on('Recieve', function (userName, message, id) {
  
            
            let userNameElem = document.createElement("b");
            userNameElem.appendChild(document.createTextNode(userName + ': '));
  
            let elem = document.createElement("p");
            elem.setAttribute("id",id);
            elem.appendChild(addCheckBox());
            elem.appendChild(userNameElem);
            elem.appendChild(document.createTextNode(message));
            
            let form = document.getElementById("inputForm");
            
            document.getElementById("chatroom").insertBefore(elem, form);
            
        });
 
        hubConnection.start();
</script>